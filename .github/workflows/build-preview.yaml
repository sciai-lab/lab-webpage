name: build-preview
run-name: build pull request preview

on:
  # run when called from another workflow
  workflow_call:

  # run if user manually requests it
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  pull-requests: write

jobs:
  build-preview:
    runs-on: ubuntu-latest

    steps:
      # for debugging
      - name: Print contexts
        uses: crazy-max/ghaction-dump-context@v1

      - name: Checkout branch contents
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.head_ref }}

      - name: Install Ruby packages
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.0"
          bundler-cache: true

      - name: Get Pages url
        id: pages
        uses: actions/configure-pages@v2
        with:
          enablement: false

      - name: Build preview version of site
        run: |
          # Build with relative URLs for local viewing without a web server
          JEKYLL_ENV=production bundle exec jekyll build --baseurl ""

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

      - name: Comment PR with preview link
        if: github.event.pull_request
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const prNumber = context.payload.pull_request.number;
            const runId = context.runId;
            
            const comment = `🔍 **Preview Build Complete**

            Your preview has been built and is available as an artifact.
            You can download it, unzip it and start a web server in the website's root directory 
            (e.g., using \`python -m http.server\`) to view it.

            📦 [Download artifact on workflow run](https://github.com/${owner}/${repo}/actions/runs/${runId})

            *This preview was generated from commit ${{ github.event.pull_request.head.sha }}*`;
            
            // Check if we already commented on this PR
            const comments = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: prNumber,
            });
            
            const existingComment = comments.data.find(comment => 
              comment.body.includes('🔍 **Preview Build Complete**')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: existingComment.id,
                body: comment,
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: prNumber,
                body: comment,
              });
            }
